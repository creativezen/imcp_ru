export default class filterModel {
    // Объект для хранения параметров фильтра. Изначально пустой.
    params = {}

    // Экземпляр URLSearchParams для работы с параметрами адресной строки.
    // Это позволяет легко создавать, читать, модифицировать или удалять параметры запроса (GET-параметры).
    url = new URLSearchParams(window.location.search)

    // Проверяем наличие параметров запроса в текущем URL. Если их нет, присваиваем false.
    urlParams = window.location.search || false

    // Строка для хранения итоговой версии параметров запроса, которая будет добавлена в URL.
    urlString = ''

    // Метод для парсинга параметров из адресной строки.
    getUrlParams() {
        if (!this.urlParams) return // Если параметров нет, просто возвращаем управление.

        // Удаляем символ вопроса (?) в начале строки запроса. Это символ обычно используется в URL для указания начала строки запроса,
        // содержащей GET-параметры. Удаляя его, мы получаем чистую строку с параметрами, разделенными амперсандами (&).
        let paramsList = this.urlParams.substring(1)
        // Разделяем полученную строку по амперсанду (&). В URL амперсанды используются для разделения разных параметров.
        // Например, в строке "param1=value1&param2=value2", амперсанды разделяют пары ключ-значение параметров.
        // Результатом split('&') будет массив, где каждый элемент — это строка вида "ключ=значение".
        .split('&')
        // Преобразуем каждый элемент полученного массива (каждую строку "ключ=значение") в подмассив, где первый элемент — это ключ, а второй — значение.
        // Это делается путем дальнейшего разделения каждой строки по знаку равенства (=).
        // Метод map применяется к каждому элементу массива и возвращает новый массив, где каждый элемент — это массив из двух элементов: ключа и значения.
        .map(item => item.split('='))

        // TODO: В результате этого кода мы получаем массив paramsList,
        // где каждый элемент является массивом из двух элементов:
        // ключом и значением параметра из строки запроса.
        // Например, для строки запроса ?param1=value1&param2=value2, результатом будет:

        /* [
            ['param1', 'value1'],
            ['param2', 'value2']
        ] */
          
        // Проходимся по каждому элементу массива paramsList. Каждый элемент этого массива — это уже подмассив с двумя значениями:
        // первое значение (индекс 0) содержит имя параметра (ключ),
        // а второе значение (индекс 1) содержит значение этого параметра, которое может быть закодировано.
        paramsList.forEach(item => {
            // Извлекаем имя параметра (ключ) из первого элемента подмассива.
            let paramName = item[0]
            // Извлекаем значение параметра из второго элемента подмассива.
            // Значение может быть закодировано для включения в URL, например, запятые могут быть закодированы как %2C.
            // Метод split('%2C') используется для разделения строки значения на массив, если оно содержит закодированные запятые.
            // Это позволяет правильно обрабатывать параметры, значения которых представляют собой списки значений, разделенные запятыми.
            let paramValue = item[1].split('%2C')
            // Добавляем извлеченный параметр в объект this.params. Имя параметра используется в качестве ключа.
            // Значение параметра (уже разделенное на части, если оно содержало запятые) присваивается этому ключу.
            // Если параметр с таким именем уже существует в объекте, его значение будет перезаписано новым.
            this.params[paramName] = paramValue
        })

        return this.params // Возвращаем объект с параметрами.
    }

    // Метод для установки новых параметров. Заменяет существующие параметры на новые.
    setParams(newData) {
        // Здесь используется оператор распространения (spread operator), который позволяет "развернуть" элементы объекта newData внутри нового литерала объекта.
        // В результате, объект this.params будет содержать все пары ключ-значение, которые были в объекте newData.
        // Это означает, что любые предыдущие параметры в this.params будут заменены на те, что содержатся в newData.
        // Если в newData есть ключи, которые уже существуют в this.params, их значения будут перезаписаны новыми из newData.
        // Если в this.params были ключи, которых нет в newData, они будут удалены, так как весь объект this.params заменяется новым объектом, содержащим только те ключи, что есть в newData.
        this.params = {
            ...newData
        }
    }

    // Удаляет указанный параметр из объекта params.
    deleteParam(param) {
        delete this.params[param]
    }

    // Создает строку параметров для URL на основе текущих параметров.
    // Это позволяет легко генерировать строку запроса для использования в адресной строке.
    createParamsUrl() {
        let new_url = new URLSearchParams()
        
        // Проходимся по всем параметрам и добавляем их в новый экземпляр URLSearchParams.
        Object.entries(this.params).forEach(item => new_url.set(`${item[0]}`, `${item[1]}`))

        this.urlString = new_url.toString() // Преобразуем в строку для использования в URL.
    }

    // Сбрасывает все параметры, очищая объект params.
    resetParams() {
        this.params = {}
    }
}
